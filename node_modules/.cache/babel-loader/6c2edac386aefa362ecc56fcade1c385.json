{"ast":null,"code":"var _jsxFileName = \"/home/viktoriia/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u0438/GitHub/goit-react-hw-02-feedback/src/components/App.jsx\";\nimport { Component } from 'react';\nimport { Section } from './Section/Section';\nimport { Notification } from './Notification/Notification';\nimport { Statistic } from './Statistic/Statistic';\nimport { FeedbackOptions } from './FeedbackOptions/FeedbackOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.handleCountGoodChange = () => {\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n    };\n\n    this.handleCountNeutralChange = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n    };\n\n    this.handleCountBadChange = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1\n      }));\n    };\n\n    this.countTotalFeedback = () => {\n      return Object.values(this.state).reduce((acc, item) => acc + item, 0);\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      const {\n        good,\n        neutral,\n        bad\n      } = this.state;\n      return good ? Math.ceil(good / (good + neutral + bad) * 100) : 0;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"Please leave feedback\",\n        children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n          handleCountGoodChange: this.handleCountGoodChange,\n          handleCountNeutralChange: this.handleCountNeutralChange,\n          handleCountBadChange: this.handleCountBadChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        title: \"Statistics\",\n        children: this.countTotalFeedback() === 0 ? /*#__PURE__*/_jsxDEV(Notification, {\n          message: \"There is no feedback\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Statistic, {\n          className: \"feedback-title\",\n          good: this.state.good,\n          neutral: this.state.neutral,\n          bad: this.state.bad,\n          total: this.countTotalFeedback(),\n          positivePercentage: this.countPositiveFeedbackPercentage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/home/viktoriia/Документи/GitHub/goit-react-hw-02-feedback/src/components/App.jsx"],"names":["Component","Section","Notification","Statistic","FeedbackOptions","App","state","good","neutral","bad","handleCountGoodChange","setState","prevState","handleCountNeutralChange","handleCountBadChange","countTotalFeedback","Object","values","reduce","acc","item","countPositiveFeedbackPercentage","Math","ceil","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,eAAT,QAAgC,mCAAhC;;;AAEA,OAAO,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACjCM,KADiC,GACzB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KADyB;;AAAA,SAOjCC,qBAPiC,GAOT,MAAM;AAC5B,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAAEL,QAAAA,IAAI,EAAEK,SAAS,CAACL,IAAV,GAAiB;AAAzB,OAAL,CAAvB;AACD,KATgC;;AAAA,SAWjCM,wBAXiC,GAWN,MAAM;AAC/B,WAAKF,QAAL,CAAcC,SAAS,KAAK;AAAEJ,QAAAA,OAAO,EAAEI,SAAS,CAACJ,OAAV,GAAoB;AAA/B,OAAL,CAAvB;AACD,KAbgC;;AAAA,SAejCM,oBAfiC,GAeV,MAAM;AAC3B,WAAKH,QAAL,CAAcC,SAAS,KAAK;AAAEH,QAAAA,GAAG,EAAEG,SAAS,CAACH,GAAV,GAAgB;AAAvB,OAAL,CAAvB;AACD,KAjBgC;;AAAA,SAmBjCM,kBAnBiC,GAmBZ,MAAM;AACzB,aAAOC,MAAM,CAACC,MAAP,CAAc,KAAKX,KAAnB,EAA0BY,MAA1B,CAAiC,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAtD,EAA4D,CAA5D,CAAP;AACD,KArBgC;;AAAA,SAuBjCC,+BAvBiC,GAuBC,MAAM;AACtC,YAAM;AAAEd,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA;AAAjB,UAAyB,KAAKH,KAApC;AACA,aAAOC,IAAI,GAAGe,IAAI,CAACC,IAAL,CAAWhB,IAAI,IAAIA,IAAI,GAAGC,OAAP,GAAiBC,GAArB,CAAL,GAAkC,GAA5C,CAAH,GAAsD,CAAjE;AACD,KA1BgC;AAAA;;AA4BjCe,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,uBAAf;AAAA,+BACE,QAAC,eAAD;AACE,UAAA,qBAAqB,EAAE,KAAKd,qBAD9B;AAEE,UAAA,wBAAwB,EAAE,KAAKG,wBAFjC;AAGE,UAAA,oBAAoB,EAAE,KAAKC;AAH7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,YAAf;AAAA,kBACG,KAAKC,kBAAL,OAA8B,CAA9B,gBACC,QAAC,YAAD;AAAc,UAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADD,gBAGC,QAAC,SAAD;AACE,UAAA,SAAS,EAAC,gBADZ;AAEE,UAAA,IAAI,EAAE,KAAKT,KAAL,CAAWC,IAFnB;AAGE,UAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,OAHtB;AAIE,UAAA,GAAG,EAAE,KAAKF,KAAL,CAAWG,GAJlB;AAKE,UAAA,KAAK,EAAE,KAAKM,kBAAL,EALT;AAME,UAAA,kBAAkB,EAAE,KAAKM,+BAAL;AANtB;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA,oBADF;AAyBD;;AAtDgC","sourcesContent":["import { Component } from 'react';\nimport { Section } from './Section/Section';\nimport { Notification } from './Notification/Notification';\nimport { Statistic } from './Statistic/Statistic';\nimport { FeedbackOptions } from './FeedbackOptions/FeedbackOptions';\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleCountGoodChange = () => {\n    this.setState(prevState => ({ good: prevState.good + 1 }));\n  };\n\n  handleCountNeutralChange = () => {\n    this.setState(prevState => ({ neutral: prevState.neutral + 1 }));\n  };\n\n  handleCountBadChange = () => {\n    this.setState(prevState => ({ bad: prevState.bad + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, item) => acc + item, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    return good ? Math.ceil((good / (good + neutral + bad)) * 100) : 0;\n  };\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            handleCountGoodChange={this.handleCountGoodChange}\n            handleCountNeutralChange={this.handleCountNeutralChange}\n            handleCountBadChange={this.handleCountBadChange}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"There is no feedback\" />\n          ) : (\n            <Statistic\n              className=\"feedback-title\"\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}